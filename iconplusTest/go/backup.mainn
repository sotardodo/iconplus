package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/joho/godotenv"
	_ "github.com/go-sql-driver/mysql"
)

// Product represents a product in the database
type Product struct {
	ID          int     `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	Quantity    int     `json:"quantity"`
	Category    string  `json:"category"`
	CreatedAt   string  `json:"created_at"`
	UpdatedAt   string  `json:"updated_at"`
}

// APIResponse represents the standard API response format
type APIResponse struct {
	Success bool        `json:"success"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
	Count   int         `json:"count,omitempty"`
	Error   string      `json:"error,omitempty"`
}

// Database connection
var db *sql.DB

// Database configuration functions
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func getDBConfig() (driver, user, password, name, host, port string) {
	driver = getEnv("DB_DRIVER", "mysql")
	user = getEnv("DB_USER", "root")
	password = getEnv("DB_PASSWORD", "apppassword")
	name = getEnv("DB_NAME", "laravel")

	// ⚠️ Default ke MySQL service di Kubernetes, bukan localhost
	host = getEnv("DB_HOST", "mysql-service.devops.svc.cluster.local")
	port = getEnv("DB_PORT", "3306")

	return
}

// Initialize database connection
func initDB() {
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found, using default environment variables")
	}

	var err error
	driver, user, password, name, host, port := getDBConfig()
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?parseTime=true", user, password, host, port, name)

	log.Printf("Connecting to database: %s@%s:%s/%s", user, host, port, name)

	db, err = sql.Open(driver, dsn)
	if err != nil {
		log.Printf("Error opening database: %v", err)
		db = nil
		return
	}

	err = db.Ping()
	if err != nil {
		log.Printf("Error connecting to database: %v", err)
		db = nil
		return
	}

	log.Println("✅ Successfully connected to MySQL database")
}

// Create sample data if database is connected
func createSampleData() {
	if db == nil {
		return
	}

	createTableQuery := `
	CREATE TABLE IF NOT EXISTS products (
		id INT AUTO_INCREMENT PRIMARY KEY,
		name VARCHAR(255) NOT NULL,
		description TEXT,
		price DECIMAL(10,2) NOT NULL,
		quantity INT DEFAULT 0,
		category VARCHAR(255),
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
	)`

	_, err := db.Exec(createTableQuery)
	if err != nil {
		log.Printf("Error creating table: %v", err)
		return
	}

	var count int
	err = db.QueryRow("SELECT COUNT(*) FROM products").Scan(&count)
	if err != nil {
		log.Printf("Error checking product count: %v", err)
		return
	}

	if count > 0 {
		log.Println("Products already exist in database")
		return
	}

	sampleProducts := []Product{
		{Name: "Laptop Pro 15", Description: "High-performance laptop with 16GB RAM and 512GB SSD", Price: 1299.99, Quantity: 25, Category: "Electronics"},
		{Name: "Wireless Headphones", Description: "Noise-cancelling wireless headphones with 30h battery life", Price: 199.99, Quantity: 50, Category: "Electronics"},
		{Name: "Coffee Maker", Description: "Programmable coffee maker with 12-cup capacity", Price: 89.99, Quantity: 15, Category: "Home & Kitchen"},
		{Name: "Running Shoes", Description: "Lightweight running shoes with excellent cushioning", Price: 129.99, Quantity: 30, Category: "Sports & Outdoors"},
		{Name: "Smartphone", Description: "Latest smartphone with 128GB storage and triple camera", Price: 699.99, Quantity: 40, Category: "Electronics"},
	}

	for _, product := range sampleProducts {
		_, err := db.Exec(`INSERT INTO products (name, description, price, quantity, category) VALUES (?, ?, ?, ?, ?)`,
			product.Name, product.Description, product.Price, product.Quantity, product.Category)
		if err != nil {
			log.Printf("Error inserting product %s: %v", product.Name, err)
		}
	}

	log.Println("✅ Sample products inserted successfully")
}

// Handlers
func getAllProducts() ([]Product, error) {
	if db == nil {
		return getMockProducts(), nil
	}

	rows, err := db.Query(`SELECT id, name, description, price, quantity, category, created_at, updated_at FROM products`)
	if err != nil {
		return getMockProducts(), err
	}
	defer rows.Close()

	var products []Product
	for rows.Next() {
		var p Product
		var createdAt, updatedAt time.Time
		if err := rows.Scan(&p.ID, &p.Name, &p.Description, &p.Price, &p.Quantity, &p.Category, &createdAt, &updatedAt); err != nil {
			return getMockProducts(), err
		}
		p.CreatedAt = createdAt.Format(time.RFC3339Nano)
		p.UpdatedAt = updatedAt.Format(time.RFC3339Nano)
		products = append(products, p)
	}
	return products, nil
}

func getProductByID(id int) (*Product, error) {
	if db == nil {
		for _, p := range getMockProducts() {
			if p.ID == id {
				return &p, nil
			}
		}
		return nil, fmt.Errorf("product not found")
	}

	row := db.QueryRow(`SELECT id, name, description, price, quantity, category, created_at, updated_at FROM products WHERE id = ?`, id)

	var p Product
	var createdAt, updatedAt time.Time
	err := row.Scan(&p.ID, &p.Name, &p.Description, &p.Price, &p.Quantity, &p.Category, &createdAt, &updatedAt)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, fmt.Errorf("product not found")
		}
		return nil, err
	}

	p.CreatedAt = createdAt.Format(time.RFC3339Nano)
	p.UpdatedAt = updatedAt.Format(time.RFC3339Nano)
	return &p, nil
}

func getMockProducts() []Product {
	return []Product{
		{ID: 1, Name: "Laptop Pro 15", Description: "High-performance laptop", Price: 1299.99, Quantity: 25, Category: "Electronics"},
		{ID: 2, Name: "Wireless Headphones", Description: "Noise-cancelling wireless headphones", Price: 199.99, Quantity: 50, Category: "Electronics"},
	}
}

func productsHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Only GET is allowed", http.StatusMethodNotAllowed)
		return
	}
	products, err := getAllProducts()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	json.NewEncoder(w).Encode(APIResponse{Success: true, Data: products, Count: len(products)})
}

func productHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Only GET is allowed", http.StatusMethodNotAllowed)
		return
	}
	idStr := strings.TrimPrefix(r.URL.Path, "/api/products/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid product ID", http.StatusBadRequest)
		return
	}
	p, err := getProductByID(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}
	json.NewEncoder(w).Encode(APIResponse{Success: true, Data: p})
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
	status := "Using mock data"
	if db != nil {
		status = "MySQL connected"
	}
	json.NewEncoder(w).Encode(APIResponse{
		Success: true,
		Message: "Go Products API is running",
		Data: map[string]string{
			"database":  status,
			"endpoints": "/api/products, /api/products/{id}",
		},
	})
}

func main() {
	initDB()
	createSampleData()

	http.HandleFunc("/", homeHandler)
	http.HandleFunc("/api/products", productsHandler)
	http.HandleFunc("/api/products/", productHandler)

	log.Println("🚀 Go Products API Server is running on http://0.0.0.0:8080")
	log.Println("   Endpoints:")
	log.Println("   • GET /api/products")
	log.Println("   • GET /api/products/{id}")

	if err := http.ListenAndServe("0.0.0.0:8080", nil); err != nil {
		log.Fatalf("Server failed: %v", err)
	}
}

